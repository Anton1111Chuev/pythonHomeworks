'''Дан список повторяющихся элементов.
Вернуть список с дублирующимися элементами.
В результирующем списке не должно быть дубликатов.'''

''' 
    !!! Задание не совсем корректное в первой строке стоит условие что список повторяющихся элементов!!!
    !!! тогда по идее не повторяющихся быть не может....!!!
    !!! тогда не понятно что значит список  с дублирующимися элементами?????
    !!! это ведь весь список (т.е если только повтояющиеся) - и задача в одну строку решается list(set(ИСХОДНЫЙ СПИСОК))
    !!! но т.к. непонятна фраза Вернуть список с дублирующимися элементами 
    !!! делаю более сложный вариант считая что есть элементы которые не дублируются
    !!! предсортировка и цикл для снижения сложности что бы не получить O(N^2)... в теории в сотрировке это возможно но насколько помню ассиптотическая сложность сортировки N logN  
'''

def list_double_item(lst:list, tutle_list:bool = False, ignor_simvols:str ='') -> list:
    lst.sort(key=str)
    lst_len = len(lst)
    res = []
    if lst_len < 2:
        return res
    pos = 1
    base_item = 0
    count = 0
    while pos < lst_len:
        if ignor_simvols != '' and ignor_simvols.find(str(lst[pos])) > -1:
            pos += 1
            continue
        if lst[pos] != lst[base_item]:
            if count and tutle_list:
                res.append((lst[base_item], count + 1))
            elif count:
                res.append(lst[base_item])
            count = 0
            base_item = pos
        else:
            count += 1
        pos += 1

    if count and tutle_list:
        res.append((lst[base_item], count + 1))
    elif count:
        res.append(lst[base_item])

    return res

print('___________ЗАДАНИЕ 1_________________')
lst = [3, 3, 3, 4, 4, 2, "22", "22", "48", 2]
print(f'Исходный список {lst} \nПолученный список {list_double_item(lst)}')

'''В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
Не учитывать знаки препинания и регистр символов.
За основу возьмите любую статью из википедии или из документации к языку.'''

big_text = ''' / .  . Задумка по реализации языка появилась в конце 1980-х годов, а разработка его реализации началась в 1989 году сотрудником голландского института CWI Гвидо ван Россумом
Для распределённой операционной системы Amoeba требовался расширяемый скриптовый язык, и Гвидо начал разрабатывать Python на досуге, позаимствовав некоторые наработки для языка ABC (Гвидо участвовал в разработке этого языка, ориентированного на обучение программированию). В феврале 1991 года Гвидо опубликовал исходный текст в группе новостей alt.sources
С самого начала Python проектировался как объектно-ориентированный язык
Гвидо ван Россум назвал язык в честь популярного британского комедийного телешоу 1970-х «Летающий цирк Монти Пайтона»[51], поскольку автор был поклонником этого телешоу, как и многие другие разработчики того времени, а в самом шоу прослеживалась некая параллель с миром компьютерной техники
Наличие дружелюбного, отзывчивого сообщества пользователей считается, наряду с дизайнерской интуицией Гвидо, одним из факторов успеха Python. Развитие языка происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP (англ. Python Enhancement Proposal) — предложений по развитию Python
 после длительного тестирования, вышла первая версия Python 3000 (или Python 3.0, также используется сокращение Py3k). В Python 3000 устранены многие недостатки архитектуры с максимально возможным (но не полным) сохранением совместимости со старыми версиями Python.
 Дата окончания срока поддержки Python 2.7 первоначально была установлена на 2015 год, а затем перенесена на 2020 год из опасения, что большая часть существующего кода не может быть легко перенесена на Python 3
 Официально Python 2.7 не поддерживается с 1 января 2020 года, хотя последнее обновление вышло в апреле 2020. Больше никаких исправлений безопасности или других улучшений для Python 2.7 не будет выпущено
 С окончанием срока службы Python 2.x поддерживаются только Python 3.6.x и более поздние версии[
.'''

big_text = big_text.lower()

print('___________ЗАДАНИЕ 2_________________')
print(big_text)

lsn = list_double_item(big_text.split(), True, " ,.;")
lsn.sort(key=lambda k: k[1], reverse=True)

print("Подсчет 10 самых встречаемых слов")
print(lsn[:10:])

'''Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения.
Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
Достаточно вернуть один допустимый вариант. *Верните все возможные варианты комплектации рюкзака.'''

print('___________ЗАДАНИЕ 3_________________')

from itertools import combinations

max_weight = 7;
dict = {'вода': 1, 'карта': 1, 'одежда': 2, 'ботинки': 2, 'горелка': 3, 'еда': 4, 'генератор': 5}
print(f'Исходный список доступных вещей {dict}')

print(f"Получившиеся варианты комплектации для максимального веса {max_weight}:")
for i in range(1, len(dict)):
    for el in (combinations(dict.items(), i)):
        sum = 0
        for j in el:
            sum += j[1]
        if sum <= max_weight:
            print(f"{''.join(str(el))} вес варианта {sum}")
